<?xml version="1.0" encoding="UTF-8"?>
<includes>


	<variable name="HomeWidgetsArts_Poster">
		<value condition="!String.IsEmpty(ListItem.Art(poster))">$INFO[ListItem.Art(poster)]</value>
		<value condition="Container.Content(Seasons) + !String.IsEmpty(ListItem.Art(season.poster))">$INFO[ListItem.Art(season.poster)]</value>
		<value condition="!Container.Content(Episodes) + !String.IsEmpty(ListItem.Art(tvshow.poster))">$INFO[ListItem.Art(tvshow.poster)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(thumb))">$INFO[ListItem.Art(thumb)]</value>
		<value condition="String.StartsWith(ListItem.FolderPath,videodb://movies/years/) | String.StartsWith(ListItem.FolderPath,musicdb://years/)">DefaultYear.png</value>
		<value condition="String.StartsWith(ListItem.FolderPath,videodb://movies/countries/)">DefaultCountry.png</value>
		<value condition="String.StartsWith(ListItem.FolderPath,videodb://movies/tags/)">DefaultTags.png</value>
		<value condition="String.Contains(ListItem.FolderPath,/playlists/video/)">DefaultVideoPlaylists.png</value>
		<value condition="String.Contains(ListItem.FolderPath,/playlists/music/)">DefaultMusicPlaylists.png</value>
		<value condition="String.StartsWith(ListItem.FolderPath,pvr://)">DefaultLiveTV.png</value>
		<value condition="!String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart) + !String.IsEmpty(ListItem.Icon)">$INFO[ListItem.Icon]</value>
		<value>$INFO[ListItem.ActualIcon,thumbs/,/folderback_poster_tp.png]</value>
	</variable>

	<variable name="HomeWidgetsArts_Landscape">
		<value condition="String.IsEqual(ListItem.DBType,episode) + !String.IsEmpty(ListItem.Art(thumb))">$INFO[ListItem.Art(thumb)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(tvshow.landscape))">$INFO[ListItem.Art(tvshow.landscape)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(landscape))">$INFO[ListItem.Art(landscape)]</value>
		<value condition="![String.IsEmpty(ListItem.Art(fanart)) | [String.IsEqual(ListItem.DBType,video) + Integer.IsGreater(ListItem.Duration,0)]]">$INFO[ListItem.Art(fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(thumb))">$INFO[ListItem.Art(thumb)]</value>
		<value condition="String.Contains(ListItem.FolderPath,/years/)">DefaultYear.png</value>
		<value condition="String.Contains(ListItem.FolderPath,/countries/)">DefaultCountry.png</value>
		<value condition="String.Contains(ListItem.FolderPath,/tags/)">DefaultTags.png</value>
		<value condition="String.Contains(ListItem.FolderPath,/playlists/video/)">DefaultVideoPlaylists.png</value>
		<value condition="String.Contains(ListItem.FolderPath,/playlists/music/)">DefaultMusicPlaylists.png</value>
		<value condition="String.StartsWith(ListItem.FolderPath,pvr://)">DefaultLiveTV.png</value>
		<value condition="![Window.IsVisible(MyVideoNav.xml) | Window.IsVisible(MyPics.xml) | String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart)] + !String.IsEmpty(ListItem.Icon)">$INFO[ListItem.Icon]</value>
		<value>$INFO[ListItem.ActualIcon,thumbs/,/folderback_episode_tp.png]</value>
	</variable>

	<variable name="HomeWidgetsIcons">
		<value condition="String.Contains(ListItem.FolderPath,/years/)">DefaultYear.png</value>
		<value condition="String.Contains(ListItem.FolderPath,/studios/)">$INFO[ListItem.Label,resource://resource.images.studios.white/,.png]</value>
		<value condition="String.Contains(ListItem.FolderPath,/countries/)">DefaultCountry.png</value>
		<value condition="String.Contains(ListItem.FolderPath,/tags/)">DefaultTags.png</value>
		<value condition="String.Contains(ListItem.FolderPath,/playlists/video/)">DefaultVideoPlaylists.png</value>
		<value condition="String.Contains(ListItem.FolderPath,/playlists/music/)">DefaultMusicPlaylists.png</value>
		<value condition="String.StartsWith(ListItem.FolderPath,pvr://)">DefaultLiveTV.png</value>
		<value condition="!String.IsEmpty(ListItem.Art(thumb))">$INFO[ListItem.Art(thumb)]</value>
		<value>$INFO[ListItem.Icon]</value>
	</variable>

	<variable name="HomeWidgetsGenresThumbs">
		<value condition="String.StartsWith(ListItem.FolderPath,videodb://movies/genres/)">$INFO[ListItem.Label,special://skin/extras/moviesgenres/,.jpg]</value>
		<value condition="String.StartsWith(ListItem.FolderPath,videodb://tvshows/genres/)">$INFO[ListItem.Label,special://skin/extras/tvshowsgenres/,.jpg]</value>
	</variable>

	<variable name="HomeWidgetFanartBG">
		<value condition="!String.IsEmpty(ListItem.Art(fanart))">$INFO[ListItem.Art(fanart)]</value>
		<value>$INFO[ListItem.FileNameAndPath]</value>
	</variable>

	<include name="HomeWidgetsHeadLabel">
		<control type="label">
			<height>30</height>
			<width>$PARAM[width]</width>
			<font>FontSize_36</font>
			<textcolor>white</textcolor>
			<shadowcolor>99000000</shadowcolor>
			<label>$VAR[HomeWidgetsListItemLabel]</label>
			<animation effect="slide" start="0,0" end="-180,145" condition="String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Logo)">Conditional</animation>
			<animation effect="slide" start="0,0" end="180,-54" condition="String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart)">Conditional</animation>
			<animation effect="slide" start="0,0" end="120,0" condition="String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Landscape)">Conditional</animation>
			<visible>$PARAM[visible]</visible>
		</control>
	</include>

	<include name="HomeWidgets_Thumb">
		<param name="width">163</param>
		<param name="height">238</param>
		<definition>
			<control type="image">
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<texture border="30">views/other/panel.png</texture>
			</control>
			<control type="image">
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<colordiffuse>$PARAM[colordiffuse]</colordiffuse>
				<aspectratio>scale</aspectratio>
				<texture background="true" fallback="$PARAM[fallback]">$PARAM[art_type]</texture>
				<bordersize>ThumbsBorderSize</bordersize>
			</control>
			<control type="image">
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<texture>$PARAM[unuatched_overlay]</texture>
				<bordersize>ThumbsBorderSize</bordersize>
				<visible>String.IsEqual(ListItem.Overlay,OverlayUnWatched.png)</visible>
			</control>
		</definition>
	</include>

	<include name="HomeWidgets_Icon">
		<param name="width">191</param>
		<param name="height">191</param>
		<definition>
			<control type="image">
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<texture border="30">views/other/panel.png</texture>
			</control>
			<control type="image">
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<colordiffuse>$PARAM[colordiffuse]</colordiffuse>
				<aspectratio>scale</aspectratio>
				<texture background="true" fallback="$PARAM[fallback]">$PARAM[art_type]</texture>
				<bordersize>ThumbsBorderSize</bordersize>
				<visible>!String.Contains(ListItem.FolderPath,/studios/)</visible>
			</control>
			<control type="image">
				<left>20</left>
				<top>20</top>
				<width>151</width>
				<height>151</height>
				<aspectratio>keep</aspectratio>
				<texture background="true" fallback="DefaultStudios.png">$PARAM[art_type]</texture>
				<bordersize>ThumbsBorderSize</bordersize>
				<visible>String.Contains(ListItem.FolderPath,/studios/)</visible>
			</control>
			<control type="image">
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<texture background="true">$VAR[AddonStatus]</texture>
				<bordersize>ThumbsBorderSize</bordersize>
			</control>
		</definition>
	</include>

	<include name="HomeWidgets_Fanart">
		<control type="image">
			<aspectratio>scale</aspectratio>
			<include>FullscreenDimensions</include>
			<texture background="true" diffuse="windows/bg/fanart_effect_two.png">$VAR[HomeWidgetFanartBG]</texture>
		</control>
	</include>

	<include name="HomeWidgets_FocusTexture">
		<param name="width">191</param>
		<param name="height">191</param>
		<definition>
			<control type="image">
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<colordiffuse>$VAR[Textures.GlobalColor]</colordiffuse>
				<texture border="30">views/other/focus_panel.png</texture>
				<include>ThumbnailsFocusAnimation</include>
				<visible>!Control.HasFocus(9000)</visible>
			</control>
		</definition>
	</include>

	<include name="HomeWidgets_InLibraryTexture">
		<control type="image">
			<left>$PARAM[left]</left>
			<width>163</width>
			<height>238</height>
			<texture background="true">overlays/in_library.png</texture>
			<bordersize>ThumbsBorderSize</bordersize>
			<visible>String.StartsWith(ListItem.FolderPath,plugin://) + !String.IsEmpty(ListItem.DBID)</visible>
		</control>
	</include>

	<include name="HomeWidgets_Poster_ItemLayout">
		<include content="HomeWidgets_Thumb">
			<param name="fallback" value="thumbs/fallback_poster_tp.png"/>
			<param name="unuatched_overlay" value="overlays/unwatched/thumbs/UnWatched_Poster.png"/>
			<param name="art_type" value="$VAR[HomeWidgetsArts_Poster]"/>
		</include>
		<include>HomeWidgets_InLibraryTexture</include>
	</include>
	<include name="HomeWidgets_Poster_Focusedlayout">
		<include content="HomeWidgets_Thumb">
			<param name="fallback" value="thumbs/fallback_poster_tp.png"/>
			<param name="unuatched_overlay" value="overlays/unwatched/thumbs/UnWatched_Poster.png"/>
			<param name="art_type" value="$VAR[HomeWidgetsArts_Poster]"/>
			<param name="colordiffuse" value="$VAR[ColorDiffuseParentFolder]"/>
		</include>
		<include>HomeWidgets_InLibraryTexture</include>
		<include content="HomeWidgets_FocusTexture">
			<param name="width" value="163"/>
			<param name="height" value="238"/>
		</include>
	</include>

	<include name="HomeWidgets_Square_ItemLayout">
		<include content="HomeWidgets_Icon">
			<param name="art_type" value="$VAR[HomeWidgetsIcons]"/>
			<param name="fallback" value="thumbs/fallback_square_tp.png"/>
		</include>
		<include content="HomeWidgets_InLibraryTexture">
			<param name="left" value="49"/>
		</include>
	</include>
	<include name="HomeWidgets_Square_Focusedlayout">
		<include content="HomeWidgets_Icon">
			<param name="art_type" value="$VAR[HomeWidgetsIcons]"/>
			<param name="fallback" value="thumbs/fallback_square_tp.png"/>
			<param name="colordiffuse" value="$VAR[ColorDiffuseThumbs]"/>
		</include>
		<include content="HomeWidgets_InLibraryTexture">
			<param name="left" value="49"/>
		</include>
		<include>HomeWidgets_FocusTexture</include>
	</include>

	<include name="HomeWidgets_Landscape_ItemLayout">
		<include content="HomeWidgets_Thumb">
			<param name="width" value="292"/>
			<param name="height" value="170"/>
			<param name="fallback" value="thumbs/fallback_fanart_tp.png"/>
			<param name="unuatched_overlay" value="overlays/unwatched/banners/UnWatched_Episodes.png"/>
			<param name="art_type" value="$VAR[HomeWidgetsArts_Landscape]"/>
		</include>
		<include content="HomeWidgets_InLibraryTexture">
			<param name="left" value="150"/>
		</include>
	</include>
	<include name="HomeWidgets_Landscape_Focusedlayout">
		<include content="HomeWidgets_Thumb">
			<param name="width" value="292"/>
			<param name="height" value="170"/>
			<param name="fallback" value="thumbs/fallback_fanart_tp.png"/>
			<param name="unuatched_overlay" value="overlays/unwatched/banners/UnWatched_Episodes.png"/>
			<param name="art_type" value="$VAR[HomeWidgetsArts_Landscape]"/>
			<param name="colordiffuse" value="$VAR[ColorDiffuseParentFolder]"/>
		</include>
		<include content="HomeWidgets_InLibraryTexture">
			<param name="left" value="150"/>
		</include>
		<include content="HomeWidgets_FocusTexture">
			<param name="width" value="292"/>
			<param name="height" value="170"/>
		</include>
	</include>

	<include name="HomeWidgets_VideoGenres_ItemLayout">
		<include content="HomeWidgets_Icon">
			<param name="art_type" value="$VAR[HomeWidgetsGenresThumbs]"/>
			<param name="fallback" value="DefaultGenre.png"/>
		</include>
	</include>
	<include name="HomeWidgets_VideoGenres_Focusedlayout">
		<include content="HomeWidgets_Icon">
			<param name="art_type" value="$VAR[HomeWidgetsGenresThumbs]"/>
			<param name="fallback" value="DefaultGenre.png"/>
		</include>
		<include>HomeWidgets_FocusTexture</include>
	</include>

	<include name="HomeWidgets_MusicGenres_ItemLayout">
		<include content="HomeWidgets_Icon">
			<param name="art_type" value="resource://resource.images.musicgenreicons.text/$INFO[ListItem.Label,,.jpg]"/>
			<param name="fallback" value="DefaultMusicGenres.png"/>
		</include>
	</include>
	<include name="HomeWidgets_MusicGenres_Focusedlayout">
		<include content="HomeWidgets_Icon">
			<param name="art_type" value="resource://resource.images.musicgenreicons.text/$INFO[ListItem.Label,,.jpg]"/>
			<param name="fallback" value="DefaultMusicGenres.png"/>
		</include>
		<include>HomeWidgets_FocusTexture</include>
	</include>



	<include name="HomeWidgetList_Vars">
		<include>OpenCloseSlideAnimationTwo</include>
		<include>HomeWidgets_VisibleHiddenAnimation</include>
		<left>45</left>
		<top>$PARAM[top]</top>
		<width>1189</width>
		<height>256</height>
		<onleft>25</onleft>
		<onright>25</onright>
		<ondown>20</ondown>
		<onup>21</onup>
		<onback>20</onback>
		<onclick condition="String.IsEqual(ListItem.DBType,tvshow) + !String.IsEmpty(ListItem.DBID)">ActivateWindow(videos,videodb://tvshows/titles/$INFO[ListItem.DBID]/,return)</onclick>
		<onclick condition="[String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)] + String.IsEmpty(ListItem.DBID)">Action(info)</onclick>
		<oninfo condition="String.IsEmpty(ListItem.DBID)">RunScript(plugin.video.themoviedb.helper,add_path=$INFO[ListItem.FolderPath],call_auto=1130)</oninfo>
		<!-- <movement>$PARAM[movement]</movement> -->
		<preloaditems>4</preloaditems>
		<orientation>horizontal</orientation>
		<pagecontrol></pagecontrol>
		<scrolltime tween="quadratic" easing="out">300</scrolltime>
		<animation effect="slide" end="0,22" time="200" tween="sine" easing="inout" condition="ControlGroup(22).HasFocus + String.IsEqual(Container(20).ListItem.Property(widgetRatio),Square)">Conditional</animation>
		<animation effect="slide" end="0,32" time="200" tween="sine" easing="inout" condition="ControlGroup(22).HasFocus + String.IsEqual(Container(20).ListItem.Property(widgetRatio),Landscape)">Conditional</animation>
	</include>

	<include name="HomeWidgetFanart_Vars">
		<include>OpenCloseSlideAnimationTwo</include>
		<include>BackgroundFade</include>
		<include>FullscreenDimensions</include>
		<onleft>25</onleft>
		<onright>25</onright>
		<ondown>20</ondown>
		<onup>21</onup>
		<onback>20</onback>
		<onclick condition="String.IsEqual(ListItem.DBType,tvshow) + !String.IsEmpty(ListItem.DBID)">ActivateWindow(videos,videodb://tvshows/titles/$INFO[ListItem.DBID]/,return)</onclick>
		<onclick condition="[String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)] + String.IsEmpty(ListItem.DBID)">Action(info)</onclick>
		<oninfo condition="String.IsEmpty(ListItem.DBID)">RunScript(plugin.video.themoviedb.helper,add_path=$INFO[ListItem.FolderPath],call_auto=1130)</oninfo>
		<preloaditems>2</preloaditems>
		<orientation>horizontal</orientation>
		<pagecontrol></pagecontrol>
		<scrolltime tween="Cubic" easing="out">450</scrolltime>
		<!-- <autoscroll delay="10000" time="10000" repeat="1000">!Control.HasFocus(25)</autoscroll> -->
	</include>

	<include name="HomeWidgetList_Fanart">
		<include>HomeWidgetFanart_Vars</include>
		<itemlayout>
			<include>HomeWidgets_Fanart</include>
		</itemlayout>
		<focusedlayout>
			<include>HomeWidgets_Fanart</include>
		</focusedlayout>
		<include>QuickNavFadeEffect</include>
	</include>

	<include name="HomeWidgetList_Poster">
		<include content="HomeWidgetList_Vars">
			<param name="top" value="110"/>
			<!-- <param name="movement" value="7"/> -->
		</include>
		<itemlayout condition="!Control.HasFocus(25) | Control.HasFocus(25)" width="171">
			<include>HomeWidgets_Poster_ItemLayout</include>
		</itemlayout>
		<focusedlayout condition="!Control.HasFocus(25)" width="171">
			<include>HomeWidgets_Poster_ItemLayout</include>
		</focusedlayout>
		<focusedlayout condition="Control.HasFocus(25)" width="171">
			<include>HomeWidgets_Poster_Focusedlayout</include>
		</focusedlayout>
	</include>

	<include name="HomeWidgetList_Square">
		<include content="HomeWidgetList_Vars">
			<param name="top" value="135"/>
		</include>
		<itemlayout condition="!Control.HasFocus(25) | Control.HasFocus(25)" width="199.5">
			<include>HomeWidgets_Square_ItemLayout</include>
		</itemlayout>
		<focusedlayout condition="!Control.HasFocus(25)" width="199.5">
			<include>HomeWidgets_Square_ItemLayout</include>
		</focusedlayout>
		<focusedlayout condition="Control.HasFocus(25)" width="199.5">
			<include>HomeWidgets_Square_Focusedlayout</include>
		</focusedlayout>
	</include>

	<include name="HomeWidgetList_Landscape">
		<include content="HomeWidgetList_Vars">
			<param name="top" value="146"/>
		</include>
		<itemlayout condition="!Control.HasFocus(25) | Control.HasFocus(25)" width="299">
			<include>HomeWidgets_Landscape_ItemLayout</include>
		</itemlayout>
		<focusedlayout condition="!Control.HasFocus(25)" width="299">
			<include>HomeWidgets_Landscape_ItemLayout</include>
		</focusedlayout>
		<focusedlayout condition="Control.HasFocus(25)" width="299">
			<include>HomeWidgets_Landscape_Focusedlayout</include>
		</focusedlayout>
	</include>

	<include name="HomeWidgetList_VideoGenres">
		<include content="HomeWidgetList_Vars">
			<param name="top" value="135"/>
		</include>
		<itemlayout condition="!Control.HasFocus(25) | Control.HasFocus(25)" width="199.5">
			<include>HomeWidgets_VideoGenres_ItemLayout</include>
		</itemlayout>
		<focusedlayout condition="!Control.HasFocus(25)" width="199.5">
			<include>HomeWidgets_VideoGenres_ItemLayout</include>
		</focusedlayout>
		<focusedlayout condition="Control.HasFocus(25)" width="199.5">
			<include>HomeWidgets_VideoGenres_Focusedlayout</include>
		</focusedlayout>
	</include>

	<include name="HomeWidgetList_MusicGenres">
		<include content="HomeWidgetList_Vars">
			<param name="top" value="135"/>
		</include>
		<itemlayout condition="!Control.HasFocus(25) | Control.HasFocus(25)" width="199.5">
			<include>HomeWidgets_MusicGenres_ItemLayout</include>
		</itemlayout>
		<focusedlayout condition="!Control.HasFocus(25)" width="199.5">
			<include>HomeWidgets_MusicGenres_ItemLayout</include>
		</focusedlayout>
		<focusedlayout condition="Control.HasFocus(25)" width="199.5">
			<include>HomeWidgets_MusicGenres_Focusedlayout</include>
		</focusedlayout>
	</include>

	<!-- HomeWidgets Lists -->
	<include name="HomeWidgets_Lists">
		<control type="group">
			<include>HomeMenu_OpenCloseSlideAnimation</include>
			<visible>!String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart)</visible>
			<animation effect="slide" start="0,0" end="0,25" time="200" tween="sine" easing="out" condition="!Control.HasFocus(23)">Conditional</animation>
			<control type="image">
				<top>25</top>
				<include>FullscreenDimensions</include>
				<texture background="true">windows/home/menu_overlay.png</texture>
			</control>
		</control>
		<control type="group" id="22">
			<include condition="!Skin.HasSetting(AutoHideHomeWidgets)">HomeWidgets_AutoHideAnimationON</include>
			<include condition="Skin.HasSetting(AutoHideHomeWidgets)">HomeWidgets_AutoHideAnimationOFF</include>
			<include>skinshortcuts-template-widget</include>
			<control type="group">
				<visible>!String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart)</visible>
				<include>HomeWidgets_Arrows</include>
				<include>HomeWidgets_Labels</include>
				<include>HomeWidgets_DataProviders</include>
			</control>
		</control>
		<control type="image">
			<include>OpenCloseSlideAnimationTwo</include>
			<include>FullscreenDimensions</include>
			<texture background="true" diffuse="windows/bg/fanart_effect_two.png">$INFO[ListItem.Art(fanart)]</texture>
			<animation effect="fade" time="300" delay="300" reversible="false">Hidden</animation>
			<visible>[String.StartsWith(Container(20).ListItem.Property(widget),RSSVideoFeeds) + String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart)] + !Integer.IsLess(Container(25).NumItems,1)</visible>
		</control>
		<!-- DISABLED
		<control type="image">
			<include>OpenCloseSlideAnimationTwo</include>
			<include>FullscreenDimensions</include>
			<texture background="true">windows/bg/bg_vignette.png</texture>
			<animation effect="fade" time="300" delay="300" reversible="false">Hidden</animation>
			<visible>String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart) + !Integer.IsLess(Container(25).NumItems,1)</visible>
		</control>
		-->
		<control type="group">
			<include>HomeMenu_OpenCloseSlideAnimation</include>
			<animation effect="fade" time="300" delay="300" reversible="false">Hidden</animation>
			<visible>String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart)</visible>
			<animation effect="slide" start="0,0" end="0,25" time="200" tween="sine" easing="out" condition="!Control.HasFocus(23)">Conditional</animation>
			<control type="image">
				<top>25</top>
				<include>FullscreenDimensions</include>
				<texture background="true">windows/home/menu_overlay.png</texture>
				<include>FanartWidget_HiddenAnimation</include>
			</control>
			<control type="group">
				<animation type="Conditional" condition="ControlGroup(22).HasFocus">
					<effect type="slide" start="0,0" end="0,83" time="300" tween="sine" easing="out" />
				</animation>
				<visible>String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart)</visible>
				<include>HomeWidgets_Labels</include>
				<include>HomeWidgets_DataProviders</include>
			</control>
		</control>
	</include>


	<!-- Navigation Arrows -->
	<include name="HomeWidgets_Arrows">
		<control type="group">
			<top>205</top>
			<control type="image">
				<left>-4</left>
				<include>WidgetsArrow_Left</include>
				<include>OpenCloseSlideAnimationTwo</include>
				<visible>ControlGroup(22).HasFocus + Container(25).HasPrevious</visible>
				<animation effect="slide" start="0,0" end="0,22" condition="!String.IsEqual(Container(20).ListItem.Property(widgetRatio),Poster)">Conditional</animation>
				<animation effect="slide" start="0,0" end="0,13" condition="String.IsEqual(Container(20).ListItem.Property(widgetRatio),Landscape)">Conditional</animation>
			</control>
			<control type="image">
				<left>1232</left>
				<include>WidgetsArrow_Right</include>
				<include>OpenCloseSlideAnimationTwo</include>
				<visible>ControlGroup(22).HasFocus + Container(25).HasNext</visible>
				<animation effect="slide" start="0,0" end="0,22" condition="!String.IsEqual(Container(20).ListItem.Property(widgetRatio),Poster)">Conditional</animation>
				<animation effect="slide" start="0,0" end="0,13" condition="String.IsEqual(Container(20).ListItem.Property(widgetRatio),Landscape)">Conditional</animation>
			</control>
		</control>
	</include>

	<include name="WidgetsArrow_Left">
		<width>50</width>
		<height>50</height>
		<colordiffuse>$VAR[Textures.GlobalColor]</colordiffuse>
		<texture border="1">windows/home/arrow_widgets_left.png</texture>
	</include>
	<include name="WidgetsArrow_Right">
		<width>50</width>
		<height>50</height>
		<texture border="1">windows/home/arrow_widgets_right.png</texture>
	</include>


	<!-- Widgets Labels  -->
	<include name="HomeWidgets_Labels">
		<control type="group">
			<left>45</left>
			<top>374</top>
			<include>HomeMenu_OpenCloseSlideAnimation</include>
			<visible>ControlGroup(22).HasFocus</visible>
			<visible>![String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Logo) + !String.IsEmpty(ListItem.Art(clearlogo))]</visible>
			<animation type="Visible" reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="0" end="100" time="200" tween="sine" easing="out"/>
			</animation>
			<animation type="Hidden"  reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="100" end="0" time="200" tween="sine" easing="out"/>
			</animation>
			<!-- DISABLED
			<animation type="Conditional" reversible="false" condition="[ControlGroup(22).HasFocus + String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Logo) + String.IsEmpty(ListItem.Art(clearlogo))] + ![Container(25).OnNext | Container(25).OnPrevious]">
				<effect type="slide" time="350" delay="6000" start="0,0" end="0,110" tween="sine" easing="in"/>
				<effect type="fade" time="350" delay="6070" start="100" easing="in" end="0"/>
			</animation>
			-->
			<!-- Label-1 -->
			<include content="HomeWidgetsHeadLabel">
				<param name="width" value="1010"/>
				<param name="visible" value="String.IsEqual(Container(20).ListItem.Property(widgetRatio),Fanart/Poster) | String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Square)"/>
			</include>
			<include content="HomeWidgetsHeadLabel">
				<param name="width" value="885"/>
				<param name="visible" value="String.IsEqual(Container(20).ListItem.Property(widgetRatio),Fanart/Landscape)"/>
			</include>
			<include content="HomeWidgetsHeadLabel">
				<param name="width" value="1190"/>
				<param name="visible" value="![String.IsEqual(Container(20).ListItem.Property(widgetRatio),Fanart/Landscape) | String.IsEqual(Container(20).ListItem.Property(widgetRatio),Fanart/Poster) | String.IsEqual(Container(20).ListItem.Property(widgetRatio),Fanart/Square)]"/>
			</include>

			<control type="group">
				<animation effect="slide" start="0,0" end="-180,130" condition="String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Logo)">Conditional</animation>
				<animation effect="slide" start="0,0" end="180,-38" condition="String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart)">Conditional</animation>
				<animation effect="slide" start="0,0" end="120,0" condition="String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Landscape)">Conditional</animation>
	
				<!-- Label-2 -->
				<control type="grouplist">
					<left>0</left>
					<top>36</top>
					<width>1050</width>
					<align>left</align>
					<itemgap>6</itemgap>
					<orientation>horizontal</orientation>
					<include>SmallDownInfo_Top250</include>
					<visible>!String.StartsWith(Container(20).ListItem.Property(widgetPath),plugin://)</visible>
					<control type="image">
						<width>36</width>
						<height>24</height>
						<aspectratio>keep</aspectratio>
						<texture colordiffuse="homeinfo">$VAR[HomeWidgetsHDFlags]</texture>
						<visible>!String.IsEmpty(Container(25).ListItem.VideoResolution)</visible>
					</control>
					<control type="image">
						<width>56</width>
						<height>24</height>
						<aspectratio>keep</aspectratio>
						<texture colordiffuse="homeinfo" fallback="flags/mpaa/tv/tv-na.png">$INFO[Container(25).ListItem.mpaa,flags/mpaa/tv/,.png]</texture>
						<visible>String.IsEqual(Container(20).ListItem.Property(widgetType),tvshows) + !String.IsEmpty(Container(25).ListItem.mpaa)</visible>
					</control>
					<control type="label">
						<height>23</height>
						<width>auto</width>
						<textcolor>viewsinfo</textcolor>
						<shadowcolor>77000000</shadowcolor>
						<font>FontSize_20</font>
						<scroll>false</scroll>
						<label>$VAR[HomeWidgetsListItemLabel2]</label>
					</control>
				</control>
	
				<!-- Plugins Label-2 -->
				<control type="grouplist">
					<left>1</left>
					<top>35</top>
					<height>0</height>
					<width>1000</width>
					<align>left</align>
					<orientation>horizontal</orientation>
					<visible>String.StartsWith(Container(20).ListItem.Property(widgetPath),plugin://)</visible>
					<control type="image">
						<width>22</width>
						<height>22</height>
						<texture background="true" colordiffuse="homeinfo">icons/calendar.png</texture>
						<visible>!String.IsEmpty(Container(25).ListItem.Premiered)</visible>
					</control>
					<control type="label">
						<height>24</height>
						<width>auto</width>
						<font>FontSize_20</font>
						<textcolor>homeinfo</textcolor>
						<label>$INFO[Container(25).ListItem.Premiered]   </label>
						<visible>!String.IsEmpty(Container(25).ListItem.Premiered)</visible>
					</control>
					<control type="image">
						<width>22</width>
						<height>22</height>
						<texture background="true" colordiffuse="homeinfo">icons/star_rating.png</texture>
						<visible>Integer.IsGreater(Container(25).ListItem.Rating,0)</visible>
					</control>
					<control type="label">
						<height>24</height>
						<width>auto</width>
						<font>FontSize_20</font>
						<textcolor>homeinfo</textcolor>
						<label>$INFO[Container(25).ListItem.Rating]$INFO[Container(25).ListItem.Votes, (, $LOCALIZE[205])]   </label>
						<visible>Integer.IsGreater(Container(25).ListItem.Rating,0)</visible>
					</control>
					<control type="image">
						<width>22</width>
						<height>22</height>
						<texture background="true" colordiffuse="homeinfo">icons/time.png</texture>
						<visible>!String.IsEmpty(Container(25).ListItem.Duration)</visible>
					</control>
					<control type="label">
						<height>24</height>
						<width>auto</width>
						<font>FontSize_20</font>
						<textcolor>homeinfo</textcolor>
						<label>$VAR[ListItemDuration]</label>
						<visible>!String.IsEmpty(Container(25).ListItem.Duration)</visible>
					</control>
				</control>
	
				<!-- Weather Label-2 -->
				<control type="grouplist">
					<left>1</left>
					<top>35</top>
					<height>0</height>
					<width>1000</width>
					<align>left</align>
					<itemgap>2</itemgap>
					<orientation>horizontal</orientation>
					<visible>String.IsEqual(Container(20).ListItem.Property(widgetType),Weather)</visible>
					<control type="label">
						<height>24</height>
						<width>auto</width>
						<font>FontSize_20</font>
						<textcolor>homeinfo</textcolor>
						<label>[CAPITALIZE]$INFO[Container(25).ListItem.Property(Outlook),,$COMMA][/CAPITALIZE]</label>
					</control>
					<control type="image">
						<width>13</width>
						<visible>!String.IsEmpty(Container(25).ListItem.Property(Outlook))</visible>
					</control>
					<control type="image">
						<width>10</width>
						<height>22</height>
						<aspectratio>keep</aspectratio>
						<texture background="true" colordiffuse="homeinfo">icons/temp_high.png</texture>
						<visible>!String.IsEmpty(Container(25).ListItem.Property(HighTemperature))</visible>
					</control>
					<control type="label">
						<height>24</height>
						<width>auto</width>
						<font>FontSize_20</font>
						<textcolor>homeinfo</textcolor>
						<label>$INFO[Container(25).ListItem.Property(HighTemperature)]</label>
					</control>
					<control type="image">
						<width>13</width>
						<visible>!String.IsEmpty(Container(25).ListItem.Property(HighTemperature))</visible>
					</control>
					<control type="image">
						<width>10</width>
						<height>22</height>
						<aspectratio>keep</aspectratio>
						<texture background="true" colordiffuse="homeinfo">icons/temp_low.png</texture>
						<visible>!String.IsEmpty(Container(25).ListItem.Property(LowTemperature))</visible>
					</control>
					<control type="label">
						<height>24</height>
						<width>auto</width>
						<font>FontSize_20</font>
						<textcolor>homeinfo</textcolor>
						<label>$INFO[Container(25).ListItem.Property(LowTemperature)]</label>
					</control>
				</control>

				<!-- NextAired Label-3 -->
				<control type="grouplist">
					<left>1</left>
					<top>63</top>
					<height>0</height>
					<width>1000</width>
					<align>left</align>
					<orientation>horizontal</orientation>
					<visible>String.IsEqual(Container(20).ListItem.Property(Widget),NextAiredTVShows) + !String.IsEmpty(Container(25).ListItem.Property(Air_Date))</visible>
					<control type="image">
						<width>22</width>
						<height>22</height>
						<texture background="true" colordiffuse="homeinfo">icons/calendar.png</texture>
					</control>
					<control type="label">
						<height>24</height>
						<width>auto</width>
						<font>FontSize_20</font>
						<textcolor>homeinfo</textcolor>
						<label>$INFO[Container(25).ListItem.Property(Air_Day),,$COMMA ]$INFO[Container(25).ListItem.Premiered]$INFO[Container(25).ListItem.Property(Air_Time), at ]$INFO[Container(25).ListItem.Property(Studio.1.Name), on ]</label>
					</control>
				</control>

				<!-- DISABLED
				<control type="image">
					<left>-15</left>
					<top>-5</top>
					<width>1</width>
					<height>66</height>
					<texture background="true">windows/bg/white.png</texture>
					<colordiffuse>ccwhite</colordiffuse>
					<visible>String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Logo)</visible>
				</control>
				<control type="image">
					<left>-111</left>
					<top>-35</top>
					<width>128</width>
					<height>128</height>
					<texture background="true">$VAR[LibraryTotals_Icons]</texture>
					<colordiffuse>ccwhite</colordiffuse>
					<visible>String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Logo)</visible>
				</control>
				-->
			</control>

			<!-- More... -->
			<control type="grouplist">
				<visible>[String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart) + !String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Logo)] + Container(25).HasNext</visible>
				<left>588</left>
				<top>-2</top>
				<width>600</width>
				<height>22</height>
				<align>right</align>
				<itemgap>6</itemgap>
				<orientation>horizontal</orientation>
				<control type="label">
					<width min="10" max="570">auto</width>
					<height>24</height>
					<font>FontSize_16B</font>
					<label>$LOCALIZE[22082]</label>
					<textcolor>homeinfo</textcolor>
					<scroll>false</scroll>
				</control>
				<control type="image">
					<width>22</width>
					<height>22</height>
					<animation effect="rotate" end="90" center="auto" condition="true">Conditional</animation>
					<texture background="true">icons/submenu_arrow.png</texture>
					<colordiffuse>homeinfo</colordiffuse>
				</control>
			</control>
		</control>

		<!-- Widget Fanart Clearlogo -->
		<control type="group">
			<left>40</left>
			<top>385</top>
			<include>HomeMenu_OpenCloseSlideAnimation</include>
			<visible>String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Logo)</visible>
			<visible>ControlGroup(22).HasFocus</visible>
			<animation type="Visible" reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="0" end="100" time="200" tween="sine" easing="out"/>
			</animation>
			<animation type="Hidden"  reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="100" end="0" time="200" tween="sine" easing="out"/>
			</animation>
			<control type="image">
				<width>390</width>
				<height>150</height>
				<fadetime>100</fadetime>
				<aspectratio>keep</aspectratio>
				<texture background="true">$INFO[ListItem.Art(clearlogo)]</texture>
			</control>
		</control>

		<!-- Widget Fanart/Poster -->
		<control type="group">
			<left>45</left>
			<top>200</top>
			<include>HomeMenu_OpenCloseSlideAnimation</include>
			<visible>String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Poster)</visible>
			<visible>ControlGroup(22).HasFocus</visible>
			<animation type="Visible" reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="0" end="100" time="200" tween="sine" easing="out"/>
			</animation>
			<animation type="Hidden"  reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="100" end="0" time="200" tween="sine" easing="out"/>
			</animation>
			<control type="image">
				<width>165</width>
				<height>240</height>
				<aspectratio scalediffuse="false">scale</aspectratio>
				<texture background="true" border="1" diffuse="thumbs/poster_diffuse.png">thumbs/thumb_back.png</texture>
			</control>
			<control type="image">
				<width>165</width>
				<height>240</height>
				<aspectratio scalediffuse="false">scale</aspectratio>
				<texture background="true" border="1" fallback="thumbs/fallback_poster_tp.png" diffuse="thumbs/poster_diffuse.png">$VAR[HomeWidgetsArts_Poster]</texture>
				<fadetime>200</fadetime>
			</control>
			<control type="image">
				<width>165</width>
				<height>240</height>
				<texture background="true" border="1" diffuse="thumbs/poster_diffuse.png">overlays/unwatched/thumbs/UnWatched_Poster.png</texture>
				<visible>String.IsEqual(ListItem.Overlay,OverlayUnWatched.png)</visible>
			</control>
			<control type="image">
				<width>165</width>
				<height>240</height>
				<texture background="true" border="1">thumbs/poster_overlay.png</texture>
			</control>
		</control>

		<!-- Widget Fanart/Square -->
		<control type="group">
			<left>45</left>
			<top>265</top>
			<include>HomeMenu_OpenCloseSlideAnimation</include>
			<visible>String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Square)</visible>
			<visible>ControlGroup(22).HasFocus</visible>
			<animation type="Visible" reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="0" end="100" time="200" tween="sine" easing="out"/>
			</animation>
			<animation type="Hidden"  reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="100" end="0" time="200" tween="sine" easing="out"/>
			</animation>
			<control type="image">
				<width>165</width>
				<height>165</height>
				<aspectratio scalediffuse="false">scale</aspectratio>
				<texture background="true" border="1" diffuse="thumbs/square_diffuse_small.png">thumbs/thumb_back.png</texture>
			</control>
			<control type="image">
				<width>165</width>
				<height>165</height>
				<aspectratio scalediffuse="false">scale</aspectratio>
				<texture background="true" border="1" diffuse="thumbs/square_diffuse_small.png">$VAR[HomeWidgetsIcons]</texture>
				<fadetime>200</fadetime>
			</control>
			<control type="image">
				<width>165</width>
				<height>165</height>
				<texture background="true" border="1" diffuse="thumbs/square_diffuse_small.png">overlays/unwatched/thumbs/UnWatched_Square.png</texture>
				<visible>String.IsEqual(ListItem.Overlay,OverlayUnWatched.png)</visible>
			</control>
			<control type="image">
				<width>165</width>
				<height>165</height>
				<texture background="true" border="1">thumbs/square_overlay_small.png</texture>
			</control>
		</control>

		<!-- Widget Fanart/Landscape -->
		<control type="group">
			<left>45</left>
			<top>265</top>
			<include>HomeMenu_OpenCloseSlideAnimation</include>
			<visible>String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Landscape)</visible>
			<visible>ControlGroup(22).HasFocus</visible>
			<animation type="Visible" reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="0" end="100" time="200" tween="sine" easing="out"/>
			</animation>
			<animation type="Hidden"  reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="100" end="0" time="200" tween="sine" easing="out"/>
			</animation>
			<control type="image">
				<width>285</width>
				<height>164</height>
				<aspectratio scalediffuse="false">scale</aspectratio>
				<texture background="true" border="1" diffuse="thumbs/landscape_diffuse.png">thumbs/thumb_back.png</texture>
			</control>
			<control type="image">
				<width>285</width>
				<height>164</height>
				<aspectratio scalediffuse="false">scale</aspectratio>
				<texture background="true" border="1" fallback="thumbs/fallback_fanart_tp.png" diffuse="thumbs/landscape_diffuse.png">$VAR[HomeWidgetsArts_Landscape]</texture>
				<fadetime>200</fadetime>
			</control>
			<control type="image">
				<width>285</width>
				<height>164</height>
				<texture background="true" border="1" diffuse="thumbs/landscape_diffuse.png">overlays/banners/thumbs/UnWatched_Episodes.png</texture>
				<visible>String.IsEqual(ListItem.Overlay,OverlayUnWatched.png)</visible>
			</control>
			<control type="image">
				<width>285</width>
				<height>164</height>
				<texture background="true" border="1">thumbs/landscape_overlay.png</texture>
			</control>
		</control>
	</include>

	<!-- Data Providers Info -->
	<include name="HomeWidgets_DataProviders">
		<control type="group">
			<include>HomeMenu_OpenCloseSlideAnimation</include>
			<visible>ControlGroup(22).HasFocus + ![Skin.HasSetting(HideExtraInfo) | String.StartsWith(Container(20).ListItem.Property(widgetRatio),Fanart/Logo)]</visible>
			<visible>String.IsEqual(Container(20).ListItem.Property(widgetType),weather) | String.StartsWith(Container(20).ListItem.Property(widgetPath),plugin://)</visible>
			<animation type="Visible" reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="0" end="100" time="150" tween="sine" easing="out"/>
			</animation>
			<animation type="Hidden"  reversible="false">
				<effect type="slide" start="0,0" end="0,0" time="300" tween="sine" easing="out" />
				<effect type="fade" start="100" end="0" time="150" tween="sine" easing="out"/>
			</animation>
			<control type="grouplist">
				<left>36</left>
				<top>467</top>
				<width>490</width>
				<height>68</height>
				<align>left</align>
				<itemgap>2</itemgap>
				<orientation>horizontal</orientation>
				<visible>!String.IsEqual(Container(20).ListItem.Property(widgetType),weather)</visible>
				<control type="image">
					<width>68</width>
					<height>68</height>
					<aspectratio>stretch</aspectratio>
					<texture background="true" colordiffuse="homeinfo">$VAR[HomeWidgetsDataProvidersIcons]</texture>
				</control>
				<control type="group">
					<width>490</width>
					<control type="label">
						<top>17</top>
						<width>490</width>
						<height>15</height>
						<font>FontSize_20B</font>
						<label>$LOCALIZE[31230]</label>
						<textcolor>homeinfo</textcolor>
						<scroll>false</scroll>
					</control>
					<control type="label">
						<top>37</top>
						<width>490</width>
						<height>15</height>
						<font>FontSize_20</font>
						<label>$VAR[HomeWidgetsDataProvidersLabels]</label>
						<textcolor>homeinfo</textcolor>
						<scroll>false</scroll>
					</control>
				</control>
			</control>
		</control>
	</include>


	<include name="HomeWidgets_ContentInfo">
		<control type="group">
			<left>45</left>
			<top>25</top>
			<include>ShutdownMenuAnimation</include>
			<include>OpenCloseSlideAnimationTwo</include>
			<include>TopRightSlideAnimations</include>
			<include>InfoDialogs_ContentInfoAnimation</include>
			<visible>ControlGroup(22).HasFocus()</visible>
			<control type="grouplist">
				<left>0</left>
				<top>0</top>
				<height>70</height>
				<width>1000</width>
				<align>left</align>
				<itemgap>15</itemgap>
				<orientation>horizontal</orientation>
				<include>LogoBig</include>
				<control type="label">
					<include>TopBigLabel</include>
					<label>$VAR[HomeWidgetsHeaderLabels]</label>
				</control>
			</control>
			<control type="label">
				<description>Page Count Label</description>
				<left>66</left>
				<top>45</top>
				<width>300</width>
				<height>20</height>
				<font>FontSize_18</font>
				<textcolor>$VAR[Text.GlobalColor]</textcolor>
				<scroll>false</scroll>
				<label>$VAR[ContainerNumItems]</label>
			</control>
		</control>
	</include>

	<variable name="HomeWidgetsHeaderLabels">
		<value condition="Control.HasFocus(150)">$VAR[QuickNav_WidgetName]</value>
		<value condition="Control.HasFocus(200)">$VAR[QuickNav_WidgetNameMovies]</value>
		<value condition="Control.HasFocus(250)">$VAR[QuickNav_WidgetNameTVShows]</value>
		<value condition="Control.HasFocus(300)">$VAR[QuickNav_WidgetNameMusic]</value>
		<value condition="ControlGroup(100).HasFocus">$LOCALIZE[31316]...</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(Widget),RSSVideoFeeds)">$LOCALIZE[31255]: $INFO[Skin.String(RSSVideoFeed.Label)]</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(Widget),WeatherForecast)">$LOCALIZE[10508]: $INFO[Window(Weather).Property(Current.Location)]</value>
		<value>$INFO[Container(20).ListItem.Property(widgetName)]</value>
	</variable>

	<variable name="HomeWidgetsListItemLabel">
		<value condition="String.IsEqual(ListItem.DBType,song) + !String.IsEmpty(Container(25).ListItem.Duration)">$INFO[Container(25).ListItem.Label]$INFO[Container(25).ListItem.Duration, (,)]</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(widgetType),musicvideos) + !String.IsEmpty(Container(25).ListItem.Label)">$INFO[Container(25).ListItem.Label]$INFO[Container(25).ListItem.Artist, - ]</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(widgetType),Weather) + ![String.IsEmpty(Container(25).ListItem.Label) | String.IsEmpty(Window(Weather).Property(Current.Condition))]">$INFO[Container(25).ListItem.Label]$INFO[Container(25).ListItem.Label2,$COMMA ]</value>
		<value condition="!String.IsEmpty(Container(25).ListItem.Property(EventName))">$INFO[Container(25).ListItem.Property(EventName)]</value>
		<value condition="!String.IsEmpty(Container(25).ListItem.TVShowTitle)">$INFO[Container(25).ListItem.TVShowTitle]</value>
		<value condition="!String.IsEmpty(Container(20).ListItem.Property(widgetType))">$INFO[Container(25).ListItem.Label]</value>
		<value condition="Window.IsVisible(PlayerControls) + ControlGroup(100).HasFocus">$VAR[PlayerTitleLabel]</value>
		<value condition="Control.HasFocus(150)">$INFO[Container(150).ListItem.Label]</value>
		<value condition="Control.HasFocus(200)">$INFO[Container(200).ListItem.Label]</value>
		<value condition="Control.HasFocus(250)">$INFO[Container(250).ListItem.TVShowTitle]</value>
		<value condition="Control.HasFocus(300) + String.IsEqual(ListItem.DBType,song)">$INFO[Container(300).ListItem.Label]$INFO[Container(300).ListItem.Duration, (,)]</value>
		<value condition="Control.HasFocus(300)">$INFO[Container(300).ListItem.Label]</value>
	</variable>


	<variable name="HomeWidgetsListItemLabel2">
		<value condition="String.StartsWith(Container(20).ListItem.Property(widgetPath),addons://) + !String.IsEmpty(Container(25).ListItem.AddonVersion)">$INFO[Container(25).ListItem.AddonVersion]</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(widgetType),movies) + ![String.IsEmpty(Container(25).ListItem.Year) | String.IsEmpty(Container(25).ListItem.Rating) | String.IsEmpty(Container(25).ListItem.Duration)]">$INFO[Container(25).ListItem.Year]$INFO[Container(25).ListItem.Rating, • ]$INFO[Container(25).ListItem.Duration(h), • ,h ]$INFO[Container(25).ListItem.Duration(mm),,min]</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(widgetType),tvshows) + !String.IsEmpty(Container(25).ListItem.Year)">$INFO[Container(25).ListItem.Year]$INFO[Container(25).ListItem.Rating, • ]$INFO[Container(25).ListItem.Property(UnWatchedEpisodes), • , $LOCALIZE[16101]]</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(widgetType),episodes) + !String.IsEmpty(Container(25).ListItem.Episode)">$INFO[Container(25).ListItem.Season]$INFO[Container(25).ListItem.Episode,x,. ]$INFO[Container(25).ListItem.Title]</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(widgetType),artists) + !String.IsEmpty(Container(25).ListItem.Artist)">$INFO[Container(25).ListItem.Genre]$INFO[Container(25).ListItem.Property(Artist_YearsActive), • $LOCALIZE[21898] ,]</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(widgetType),albums) + !String.IsEmpty(Container(25).ListItem.Album)">$INFO[Container(25).ListItem.Artist]$INFO[Container(25).ListItem.Year, • ]</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(widgetType),songs) + !String.IsEmpty(Container(25).ListItem.Artist)">$INFO[Container(25).ListItem.Artist]$INFO[Container(25).ListItem.Album, - ]$INFO[Container(25).ListItem.TrackNumber, ($LOCALIZE[554] #,)]</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(widgetType),pvr) + !String.IsEmpty(Container(25).ListItem.Title)">$INFO[Container(25).ListItem.Title]</value>
		<value condition="Window.IsVisible(PlayerControls) + ControlGroup(100).HasFocus">$VAR[PlayerSubLabel]</value>
		<value condition="Control.HasFocus(200)">$INFO[Container(200).ListItem.Year]$INFO[Container(200).ListItem.Rating, • ]$INFO[ListItem.Duration(h), • ,h ]$INFO[ListItem.Duration(mm),,min]</value>
		<value condition="Control.HasFocus(250) + String.IsEqual(Container(250).ListItem.DBType,tvshow) + !String.IsEmpty(Container(250).ListItem.Year)">$INFO[Container(250).ListItem.Year]$INFO[Container(250).ListItem.Rating, • ]$INFO[Container(250).ListItem.Property(UnWatchedEpisodes), • , $LOCALIZE[16101]]</value>
		<value condition="Control.HasFocus(250) + String.IsEqual(Container(250).ListItem.DBType,episode) + !String.IsEmpty(Container(250).ListItem.Episode)">$INFO[Container(250).ListItem.Season]$INFO[Container(250).ListItem.Episode,x,. ]$INFO[Container(250).ListItem.Title]</value>
		<value condition="Control.HasFocus(250) + !String.IsEmpty(Container(250).ListItem.Episode)">$INFO[Container(250).ListItem.Season]$INFO[Container(250).ListItem.Episode,x,. ]$INFO[Container(250).ListItem.Title]</value>
		<value condition="Control.HasFocus(300) + String.IsEqual(Container(300).ListItem.DBType,artist) + !String.IsEmpty(Container(300).ListItem.Artist)">$INFO[Container(300).ListItem.Genre]$INFO[Container(300).ListItem.Property(Artist_YearsActive), • $LOCALIZE[21898] ,]</value>
		<value condition="Control.HasFocus(300) + String.IsEqual(Container(300).ListItem.DBType,album) + !String.IsEmpty(Container(300).ListItem.Album)">$INFO[Container(300).ListItem.Artist]$INFO[Container(300).ListItem.Year, • ]</value>
		<value condition="Control.HasFocus(300) + String.IsEqual(Container(300).ListItem.DBType,song) + !String.IsEmpty(Container(300).ListItem.Artist)">$INFO[Container(300).ListItem.Artist]$INFO[Container(300).ListItem.Album, - ]$INFO[Container(300).ListItem.TrackNumber, ($LOCALIZE[554] #,)]</value>
	</variable>

	<variable name="HomeWidgetsHDFlags">
		<value condition="String.IsEqual(Container(25).ListItem.VideoResolution,8K)">flags/def/8k.png</value>
		<value condition="String.IsEqual(Container(25).ListItem.VideoResolution,4K)">flags/def/4k.png</value>
		<value condition="Integer.IsGreater(Container(25).ListItem.VideoResolution,719)">flags/def/hd.png</value>
		<value condition="Integer.IsLessOrEqual(Container(25).ListItem.VideoResolution,719)">flags/def/sd.png</value>
	</variable>

	<variable name="HomeWidgetsDataProvidersIcons">
		<value condition="String.IsEqual(Container(20).ListItem.Property(Widget),MostWatchedMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),MostAnticipatedMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),BoxOfficeMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),MostWatchedTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),MostAnticipatedTVShows) | String.StartsWith(Container(20).ListItem.Property(widgetPath),plugin://script.extendedinfo)">icons/trakt.png</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(Widget),InCinemasMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),UpcomingMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),TrendingMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),PopularMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),TopRatedMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),TrendingTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),PopularTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),TopRatedTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),AiringTodayTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),OnAirTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),PopularPeople) | String.StartsWith(Container(20).ListItem.Property(widgetPath),plugin://script.embuary.info) | String.StartsWith(Container(20).ListItem.Property(widgetPath),plugin://plugin.video.themoviedb.helper)">icons/tmdb.png</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(Widget),RSSVideoFeeds)">icons/youtube.png</value>
		<value>icons/addons.png</value>
	</variable>

	<variable name="HomeWidgetsDataProvidersLabels">
		<value condition="String.IsEqual(Container(20).ListItem.Property(Widget),MostWatchedMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),MostAnticipatedMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),BoxOfficeMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),MostWatchedTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),MostAnticipatedTVShows) | String.StartsWith(Container(20).ListItem.Property(widgetPath),plugin://script.extendedinfo)">Trakt.tv</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(Widget),InCinemasMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),UpcomingMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),TrendingMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),PopularMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),TopRatedMovies) | String.IsEqual(Container(20).ListItem.Property(Widget),TrendingTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),PopularTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),TopRatedTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),AiringTodayTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),OnAirTVShows) | String.IsEqual(Container(20).ListItem.Property(Widget),PopularPeople) | String.StartsWith(Container(20).ListItem.Property(widgetPath),plugin://script.embuary.info) | String.StartsWith(Container(20).ListItem.Property(widgetPath),plugin://plugin.video.themoviedb.helper)">The MovieDB</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(widget),NextAiredTVShows)">script.skin.helper.widgets</value>
		<value condition="String.IsEqual(Container(20).ListItem.Property(Widget),RSSVideoFeeds)">YouTube</value>
		<value>$INFO[Container(20).ListItem.Property(widgetName)]</value>
	</variable>

	<variable name="RSSVideoFeed.Type">
		<value condition="String.IsEqual(Skin.String(RSSVideoFeed.Type),Channel)">plugin://plugin.video.youtube/channel/$INFO[Skin.String(RSSVideoFeed.URL)]/</value>
		<value condition="String.IsEqual(Skin.String(RSSVideoFeed.Type),User)">plugin://plugin.video.youtube/kodion/search/query/?q=$INFO[Skin.String(RSSVideoFeed.URL)]&amp;hide_folders=true</value>
	</variable>

	<variable name="CustomItemNumber">
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem1)">1</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem2)">2</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem3)">3</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem4)">4</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem5)">5</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem6)">6</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem7)">7</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem8)">8</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem9)">9</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem10)">10</value>
	</variable>

	<variable name="CustomItemLabel">
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem1)">$INFO[Skin.String(CustomItem.1.Label)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem2)">$INFO[Skin.String(CustomItem.2.Label)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem3)">$INFO[Skin.String(CustomItem.3.Label)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem4)">$INFO[Skin.String(CustomItem.4.Label)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem5)">$INFO[Skin.String(CustomItem.5.Label)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem6)">$INFO[Skin.String(CustomItem.6.Label)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem7)">$INFO[Skin.String(CustomItem.7.Label)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem8)">$INFO[Skin.String(CustomItem.8.Label)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem9)">$INFO[Skin.String(CustomItem.9.Label)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem10)">$INFO[Skin.String(CustomItem.10.Label)]</value>
	</variable>

	<variable name="CustomItemThumb">
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem1)">$INFO[Skin.String(CustomItem.1.Thumb)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem2)">$INFO[Skin.String(CustomItem.2.Thumb)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem3)">$INFO[Skin.String(CustomItem.3.Thumb)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem4)">$INFO[Skin.String(CustomItem.4.Thumb)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem5)">$INFO[Skin.String(CustomItem.5.Thumb)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem6)">$INFO[Skin.String(CustomItem.6.Thumb)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem7)">$INFO[Skin.String(CustomItem.7.Thumb)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem8)">$INFO[Skin.String(CustomItem.8.Thumb)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem9)">$INFO[Skin.String(CustomItem.9.Thumb)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem10)">$INFO[Skin.String(CustomItem.10.Thumb)]</value>
	</variable>

	<variable name="CustomItemPath">
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem1)">$INFO[Skin.String(CustomItem.1.Path)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem2)">$INFO[Skin.String(CustomItem.2.Path)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem3)">$INFO[Skin.String(CustomItem.3.Path)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem4)">$INFO[Skin.String(CustomItem.4.Path)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem5)">$INFO[Skin.String(CustomItem.5.Path)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem6)">$INFO[Skin.String(CustomItem.6.Path)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem7)">$INFO[Skin.String(CustomItem.7.Path)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem8)">$INFO[Skin.String(CustomItem.8.Path)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem9)">$INFO[Skin.String(CustomItem.9.Path)]</value>
		<value condition="String.IsEqual(Window(SkinSettings).Property(EditCustomItems),customitem10)">$INFO[Skin.String(CustomItem.10.Path)]</value>
	</variable>


</includes>
